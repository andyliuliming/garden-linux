// This file was generated by counterfeiter
package fake_watcher

import (
	"sync"

	"code.cloudfoundry.org/garden-linux/linux_container"
)

type FakeWatcher struct {
	WatchStub        func(func()) error
	watchMutex       sync.RWMutex
	watchArgsForCall []struct {
		arg1 func()
	}
	watchReturns struct {
		result1 error
	}
	UnwatchStub        func()
	unwatchMutex       sync.RWMutex
	unwatchArgsForCall []struct{}
}

func (fake *FakeWatcher) Watch(arg1 func()) error {
	fake.watchMutex.Lock()
	fake.watchArgsForCall = append(fake.watchArgsForCall, struct {
		arg1 func()
	}{arg1})
	fake.watchMutex.Unlock()
	if fake.WatchStub != nil {
		return fake.WatchStub(arg1)
	} else {
		return fake.watchReturns.result1
	}
}

func (fake *FakeWatcher) WatchCallCount() int {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	return len(fake.watchArgsForCall)
}

func (fake *FakeWatcher) WatchArgsForCall(i int) func() {
	fake.watchMutex.RLock()
	defer fake.watchMutex.RUnlock()
	return fake.watchArgsForCall[i].arg1
}

func (fake *FakeWatcher) WatchReturns(result1 error) {
	fake.WatchStub = nil
	fake.watchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWatcher) Unwatch() {
	fake.unwatchMutex.Lock()
	fake.unwatchArgsForCall = append(fake.unwatchArgsForCall, struct{}{})
	fake.unwatchMutex.Unlock()
	if fake.UnwatchStub != nil {
		fake.UnwatchStub()
	}
}

func (fake *FakeWatcher) UnwatchCallCount() int {
	fake.unwatchMutex.RLock()
	defer fake.unwatchMutex.RUnlock()
	return len(fake.unwatchArgsForCall)
}

var _ linux_container.Watcher = new(FakeWatcher)
