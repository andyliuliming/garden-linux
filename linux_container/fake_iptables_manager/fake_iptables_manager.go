// This file was generated by counterfeiter
package fake_iptables_manager

import (
	"net"
	"sync"

	"code.cloudfoundry.org/garden-linux/linux_container"
)

type FakeIPTablesManager struct {
	ContainerSetupStub        func(containerID, bridgeName string, ip net.IP, network *net.IPNet) error
	containerSetupMutex       sync.RWMutex
	containerSetupArgsForCall []struct {
		containerID string
		bridgeName  string
		ip          net.IP
		network     *net.IPNet
	}
	containerSetupReturns struct {
		result1 error
	}
	ContainerTeardownStub        func(containerID string) error
	containerTeardownMutex       sync.RWMutex
	containerTeardownArgsForCall []struct {
		containerID string
	}
	containerTeardownReturns struct {
		result1 error
	}
}

func (fake *FakeIPTablesManager) ContainerSetup(containerID string, bridgeName string, ip net.IP, network *net.IPNet) error {
	fake.containerSetupMutex.Lock()
	fake.containerSetupArgsForCall = append(fake.containerSetupArgsForCall, struct {
		containerID string
		bridgeName  string
		ip          net.IP
		network     *net.IPNet
	}{containerID, bridgeName, ip, network})
	fake.containerSetupMutex.Unlock()
	if fake.ContainerSetupStub != nil {
		return fake.ContainerSetupStub(containerID, bridgeName, ip, network)
	} else {
		return fake.containerSetupReturns.result1
	}
}

func (fake *FakeIPTablesManager) ContainerSetupCallCount() int {
	fake.containerSetupMutex.RLock()
	defer fake.containerSetupMutex.RUnlock()
	return len(fake.containerSetupArgsForCall)
}

func (fake *FakeIPTablesManager) ContainerSetupArgsForCall(i int) (string, string, net.IP, *net.IPNet) {
	fake.containerSetupMutex.RLock()
	defer fake.containerSetupMutex.RUnlock()
	return fake.containerSetupArgsForCall[i].containerID, fake.containerSetupArgsForCall[i].bridgeName, fake.containerSetupArgsForCall[i].ip, fake.containerSetupArgsForCall[i].network
}

func (fake *FakeIPTablesManager) ContainerSetupReturns(result1 error) {
	fake.ContainerSetupStub = nil
	fake.containerSetupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIPTablesManager) ContainerTeardown(containerID string) error {
	fake.containerTeardownMutex.Lock()
	fake.containerTeardownArgsForCall = append(fake.containerTeardownArgsForCall, struct {
		containerID string
	}{containerID})
	fake.containerTeardownMutex.Unlock()
	if fake.ContainerTeardownStub != nil {
		return fake.ContainerTeardownStub(containerID)
	} else {
		return fake.containerTeardownReturns.result1
	}
}

func (fake *FakeIPTablesManager) ContainerTeardownCallCount() int {
	fake.containerTeardownMutex.RLock()
	defer fake.containerTeardownMutex.RUnlock()
	return len(fake.containerTeardownArgsForCall)
}

func (fake *FakeIPTablesManager) ContainerTeardownArgsForCall(i int) string {
	fake.containerTeardownMutex.RLock()
	defer fake.containerTeardownMutex.RUnlock()
	return fake.containerTeardownArgsForCall[i].containerID
}

func (fake *FakeIPTablesManager) ContainerTeardownReturns(result1 error) {
	fake.ContainerTeardownStub = nil
	fake.containerTeardownReturns = struct {
		result1 error
	}{result1}
}

var _ linux_container.IPTablesManager = new(FakeIPTablesManager)
